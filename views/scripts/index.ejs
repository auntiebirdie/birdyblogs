var postData = {};
var timeout = null;

toggleLoader(true);

function updatePreview() {
  postData = {
    caption: "",
    source: <%- locals.image ? `"${image}"` : `$('#image').val()` %>,
    source_url: <%- locals.source ? `"${source}"` : `$('#source').val()` %>,
    tags: [],
    blogs: <%- locals.blog ? `["${blog}"]` : `$('#blogs').val()` %>,
    species: []
  };

  fetchFromCache('birds').then((birds) => {
    $('.post-blogs', '#preview').html(postData.blogs.join(", "));

    let species = $('#species').val().map((species) => birds.find((bird) => bird.id == species));

    for (let specie of species) {
      postData.caption += `<p>${specie.commonName} <em>(${specie.scientificName})</em></p>`;
      postData.species.push(specie.commonName);
      postData.tags.push(specie.commonName, specie.scientificName);
      if (!postData.tags.includes(specie.family)) {
        postData.tags.push(specie.family);
      }
      if (!postData.tags.includes(specie.order)) {
        postData.tags.push(specie.order);
      }
    }

    var content = "";

    if (species.length > 0) {
      content += postData.caption;
    }
    else {
      content += '<p><span class="bg-secondary text-light p-1">Species</span></p>';
    }

    if ($('#attribution_name').val()) {
      postData.caption += `<p>&copy; <a href="${$('#attribution_url').val()}" target="_blank">${$('#attribution_name').val()}</a></p>`;
      content += `<p>&copy; <a href="${$('#attribution_url').val()}" target="_blank">${$('#attribution_name').val()}</a></p>`;

      postData.tags.push($('#attribution_name').val());
    }
    else {
      content += '<p>&copy; <span class="bg-secondary text-light p-1">Attribution Name</span></p>';
    }

    postData.tags.push('birds');

    $('img', '#preview').attr('src', postData.source != "" ? postData.source : "/placeholder.jpg");

    content += '<p class="text-muted">Source: ';

    try {
      content += (postData.source_url != "" ? `<a href="${postData.source_url}" class="text-muted" target="_blank">${postData.source_url.match(/^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)/im)[1]}</a>` : '<span class="bg-secondary text-light p-1">Source</span>');
    } catch (err) {
      content += '<span class="bg-secondary text-light p-1">Source</span>';
    }

    content += '</p>';

    $('.post-content', '#preview').html(content);

    $('.post-tags', '#preview').html('#' + postData.tags.join(' #').toLowerCase());

    toggleLoader(false);
  });
}

fetchFromCache('birds');
fetchFromCache('blogs');

$(document).ready(() => {
  var species = new SlimSelect({
    select: '#species',
    ajax: function(search, callback) {
      if (timeout) {
        clearTimeout(timeout);
      }
      timeout = setTimeout(function() {
        fetchFromCache('birds').then((birds) => {
          let data = fuzzysort.go(search, birds, {
            keys: ['commonName', 'scientificName']
          });

          callback(data.map((datum) => {
            return {
              value: datum.obj.id,
              text: `${datum.obj.commonName} (${datum.obj.scientificName})`,
              innerHTML: `${datum.obj.commonName}<br>&nbsp;<small>(${datum.obj.scientificName})</small>`
            }
          }));
        });
      }, 500);
    },
    onChange: function() {
      if ($('body').css('opacity') == 1)
        updatePreview();
    }
  });

 <% if (mode == 'post') { %>
  new SlimSelect({
    select: '#blogs',
    ajax: function(search, callback) {
      if (timeout) {
        clearTimeout(timeout);
      }

      timeout = setTimeout(function() {
        fetchFromCache('blogs').then((blogs) => {
          let data = fuzzysort.go(search, blogs, {
            keys: ['name', 'title']
          });

          callback(data.map((datum) => {
            return {
              value: datum.obj.name,
              text: `@${datum.obj.name}`,
              innerHTML: `<img src="${datum.obj.avatar.url}" width="${datum.obj.avatar.width}" class="d-inline rounded me-2"> <div>@${datum.obj.name}<br>${datum.obj.title}</div>`
            }
          }));
        });
      }, 500);
    },
    onChange: function() {
      if ($('body').css('opacity') == 1)
        updatePreview();
    }
  });
 <% } else if (mode == 'edit') { %>
  fetchFromCache('birds').then((birds) => {
    var data = [];
    var values = [];

    for (let specie of <%- JSON.stringify(species) %>) {
      var tmp = birds.find((bird) => bird.scientificName == specie);

      if (tmp && !$('#species').val().includes(tmp.id)) {
        data.push({
                      value: tmp.id,
                      text: `${tmp.commonName} (${tmp.scientificName})`,
                      innerHTML: `${tmp.commonName}<br>&nbsp;<small>(${tmp.scientificName})</small>`
        });

        values.push(tmp.id);
      }
    }

    species.setData(data);
    species.set(values);
  });
 <% } %>

  $('input', '#form').on('change', function () {
    if ($('body').css('opacity') == 1) 
      updatePreview();
  });

  $('#fetchData').on('click', function() {
    toggleLoader(true);

    this.innerHTML = '<span class="spinner-border"></span>';

    $.ajax({
      cache: false,
      url: `/fetch?url=${encodeURIComponent($('#source').val())}`,
      method: 'GET',
      dataType: 'json',
      contentType: 'application/json',
      success: (res) => {
        if (res.error) {
          $('#errorMessage').removeClass('d-none');
          $('#errorMessage').html(`⚠️ ${res.error}`);
        toggleLoader(false);
        this.innerHTML = 'Fetch Data';
        } else {
          fetchFromCache('birds').then((birds) => {
            for (let key in res) {
              switch (key) {
                case 'species':
                  var tmp = birds.find((bird) => bird.id == res['species']);

                  if (tmp && !$('#species').val().includes(tmp.id)) {
                    species.setData([{
                      value: tmp.id,
                      text: `${tmp.commonName} (${tmp.scientificName})`,
                      innerHTML: `${tmp.commonName}<br>&nbsp;<small>(${tmp.scientificName})</small>`
                    }]);

                    species.set([tmp.id]);
                  }

                  break;
                default:
                  $(`#${key}`).val(res[key]);
              }
            }

            updatePreview();
            toggleLoader(false);
            this.innerHTML = 'Fetch Data';
          });
        }
      }
    });
  });

  $('#submit').on('click', function() {
    var pleaseNoUse = {
      'attribution_name' : ['Anne Reardon']
    };

    for (let key in pleaseNoUse) {
      if (pleaseNoUse[key].includes($('#' + key).val())) {
        switch (key) {
          case 'attribution_name':
            $('#errorMessage').removeClass('d-none');
            $('#errorMessage').html(`⚠️ The copyright holder ${$('#' + key).val()} has requested that their photographs not be used.`);
            break;
        }
        return false;
      }
    } 

    for (let key in postData) {
       if (!postData[key] || postData[key] == "" || postData[key].length == 0) {
         $('#errorMessage').removeClass('d-none');
         $('#errorMessage').html('⚠️ Please fill in a value for all fields.'); 
         return false;
       }
    }

    toggleLoader(true);

    this.innerHTML = '<span class="spinner-border"></span>';

    $.ajax({
      cache: false,
      url: "<%= mode == 'post' ? '/submit' : `/blogs/${blog}/${post}` %>",
      method: 'POST',
      data: JSON.stringify(postData),
      dataType: 'json',
      contentType: 'application/json',
      success: function(res) {
        window.location.reload();
      }
    });
  });

 <% if (mode == 'edit') { %>
  $('#delete').on('click', function () {
    $.ajax({
      cache: false,
      url: "<%= `/blogs/${blog}/${post}` %>",
      method: 'DELETE',
      data: JSON.stringify(postData),
      dataType: 'json',
      contentType: 'application/json',
      success: function(res) {
        window.location.href = '/blogs/<%= blog %>/queue';
      }
    });
  });
 <% } %>

  $('#errorMessage').on('click', function () {
    $('#errorMessage').addClass('d-none');
  });

  setTimeout(updatePreview, 250);
});
